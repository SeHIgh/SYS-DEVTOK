DevTok 메뉴얼

- 사용자 정보 저장 파일
    예시) (username).txt 파일
    (누적 공부시간) (연속 공부시간)
    (공부 시작 일자) (공부시간) (코멘트)
    (공부 시작 일자) (공부시간) (코멘트)
    (공부 시작 일자) (공부시간) (코멘트)
    (공부 시작 일자) (공부시간) (코멘트)
    ...


- 사용자 순위 (누적 시간 기준) 파일
    예시) userRanking.txt 파일
    (등수) (사용자 이름) (누적 공부시간) (연속 공부시간)
    (등수) (사용자 이름) (누적 공부시간) (연속 공부시간)
    (등수) (사용자 이름) (누적 공부시간) (연속 공부시간)
    (등수) (사용자 이름) (누적 공부시간) (연속 공부시간)
    ...

- 사용자 순위 파일 작동 방식
    1. 프로그램 시작 시 파일 읽어서 저장
    2. 사용자 공부 끝낼 때마다 공부시간을 순위에 반영하여 파일 수정
    3. 누적 시간 기준으로 정렬
    4. 기록 보기에 들어가면 저장된 순위 출력

- 세부 알고리즘
    compare_users 함수:
        1. 누적 공부 시간을 먼저 비교
        2. 누적 공부 시간이 같을 경우, 연속 공부 시간을 기준으로 내림차순 정렬
        (userB->continuous_time - userA->continuous_time)
        을 통해 연속 공부 시간이 더 큰 유저가 높은 순위를 갖도록 정렬
        3. 연속 공부 시간까지 같다면, 이름 순서에 관계없이 첫 번째로 등장한 유저가 더 높은 순위 유지
    
- 알고리즘 수정
    quick sort -> insertion sort
    qsort 는 정렬되지 않은 케이스가 많은 전체 데이터를 정렬 시에 적합 




- 일자 받아오기
    1. 그냥 받아오기
        $ date
        2024. 11. 11. (월) 13:57:08 KST

    2. 포맷 정해서 받아오기
        $ date +"%y%m%d%H%M%S"
        241111135708


- 컴파일 방법
    예시) 실행할 파일 : ranking.c, main.c
    
    $gcc main.c ranking.c -o (실행파일이름)

    두 소스코드가 함께 컴파일 되면서, ranking.h 파일의 함수 및 구조체 선언도 컴파일에 자동 포함됨